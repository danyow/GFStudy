@startuml
class SoundManager <<sealed>> <<partial>> {
}
class SoundAgent <<sealed>> {
    - <<readonly>> m_SoundGroup : SoundGroup
    - <<readonly>> m_SoundHelper : ISoundHelper
    - <<readonly>> m_SoundAgentHelper : ISoundAgentHelper
    - m_SerialId : int
    - m_SoundAsset : object
    - m_SetSoundAssetTime : DateTime
    - m_MuteInSoundGroup : bool
    - m_VolumeInSoundGroup : float
    + SoundAgent(soundGroup:SoundGroup, soundHelper:ISoundHelper, soundAgentHelper:ISoundAgentHelper)
    + SoundGroup : ISoundGroup <<get>>
    + SerialId : int <<get>> <<set>>
    + IsPlaying : bool <<get>>
    + Length : float <<get>>
    + Time : float <<get>> <<set>>
    + Mute : bool <<get>>
    + MuteInSoundGroup : bool <<get>> <<set>>
    + Loop : bool <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Volume : float <<get>>
    + VolumeInSoundGroup : float <<get>> <<set>>
    + Pitch : float <<get>> <<set>>
    + PanStereo : float <<get>> <<set>>
    + SpatialBlend : float <<get>> <<set>>
    + MaxDistance : float <<get>> <<set>>
    + DopplerLevel : float <<get>> <<set>>
    + Helper : ISoundAgentHelper <<get>>
    <<internal>> SetSoundAssetTime : DateTime <<get>>
    + Play() : void
    + Play(fadeInSeconds:float) : void
    + Stop() : void
    + Stop(fadeOutSeconds:float) : void
    + Pause() : void
    + Pause(fadeOutSeconds:float) : void
    + Resume() : void
    + Resume(fadeInSeconds:float) : void
    + Reset() : void
    <<internal>> SetSoundAsset(soundAsset:object) : bool
    <<internal>> RefreshMute() : void
    <<internal>> RefreshVolume() : void
    - OnResetSoundAgent(sender:object, e:ResetSoundAgentEventArgs) : void
}
GameFrameworkModule <|-- SoundManager
ISoundManager <|-- SoundManager
SoundManager +-- SoundAgent
ISoundAgent <|-- SoundAgent
@enduml
