@startuml
class SoundManager <<sealed>> <<partial>> {
    - <<readonly>> m_SoundGroups : Dictionary<string, SoundGroup>
    - <<readonly>> m_SoundsBeingLoaded : List<int>
    - <<readonly>> m_SoundsToReleaseOnLoad : HashSet<int>
    - <<readonly>> m_LoadAssetCallbacks : LoadAssetCallbacks
    - m_ResourceManager : IResourceManager
    - m_SoundHelper : ISoundHelper
    - m_Serial : int
    - m_PlaySoundSuccessEventHandler : EventHandler<PlaySoundSuccessEventArgs>
    - m_PlaySoundFailureEventHandler : EventHandler<PlaySoundFailureEventArgs>
    - m_PlaySoundUpdateEventHandler : EventHandler<PlaySoundUpdateEventArgs>
    - m_PlaySoundDependencyAssetEventHandler : EventHandler<PlaySoundDependencyAssetEventArgs>
    + SoundManager()
    + SoundGroupCount : int <<get>>
    <<internal>> <<override>> Update(elapseSeconds:float, realElapseSeconds:float) : void
    <<internal>> <<override>> Shutdown() : void
    + SetResourceManager(resourceManager:IResourceManager) : void
    + SetSoundHelper(soundHelper:ISoundHelper) : void
    + HasSoundGroup(soundGroupName:string) : bool
    + GetSoundGroup(soundGroupName:string) : ISoundGroup
    + GetAllSoundGroups() : ISoundGroup[]
    + GetAllSoundGroups(results:List<ISoundGroup>) : void
    + AddSoundGroup(soundGroupName:string, soundGroupHelper:ISoundGroupHelper) : bool
    + AddSoundGroup(soundGroupName:string, soundGroupAvoidBeingReplacedBySamePriority:bool, soundGroupMute:bool, soundGroupVolume:float, soundGroupHelper:ISoundGroupHelper) : bool
    + AddSoundAgentHelper(soundGroupName:string, soundAgentHelper:ISoundAgentHelper) : void
    + GetAllLoadingSoundSerialIds() : int[]
    + GetAllLoadingSoundSerialIds(results:List<int>) : void
    + IsLoadingSound(serialId:int) : bool
    + PlaySound(soundAssetName:string, soundGroupName:string) : int
    + PlaySound(soundAssetName:string, soundGroupName:string, priority:int) : int
    + PlaySound(soundAssetName:string, soundGroupName:string, playSoundParams:PlaySoundParams) : int
    + PlaySound(soundAssetName:string, soundGroupName:string, userData:object) : int
    + PlaySound(soundAssetName:string, soundGroupName:string, priority:int, playSoundParams:PlaySoundParams) : int
    + PlaySound(soundAssetName:string, soundGroupName:string, priority:int, userData:object) : int
    + PlaySound(soundAssetName:string, soundGroupName:string, playSoundParams:PlaySoundParams, userData:object) : int
    + PlaySound(soundAssetName:string, soundGroupName:string, priority:int, playSoundParams:PlaySoundParams, userData:object) : int
    + StopSound(serialId:int) : bool
    + StopSound(serialId:int, fadeOutSeconds:float) : bool
    + StopAllLoadedSounds() : void
    + StopAllLoadedSounds(fadeOutSeconds:float) : void
    + StopAllLoadingSounds() : void
    + PauseSound(serialId:int) : void
    + PauseSound(serialId:int, fadeOutSeconds:float) : void
    + ResumeSound(serialId:int) : void
    + ResumeSound(serialId:int, fadeInSeconds:float) : void
    - LoadAssetSuccessCallback(soundAssetName:string, soundAsset:object, duration:float, userData:object) : void
    - LoadAssetFailureCallback(soundAssetName:string, status:LoadResourceStatus, errorMessage:string, userData:object) : void
    - LoadAssetUpdateCallback(soundAssetName:string, progress:float, userData:object) : void
    - LoadAssetDependencyAssetCallback(soundAssetName:string, dependencyAssetName:string, loadedCount:int, totalCount:int, userData:object) : void
}
GameFrameworkModule <|-- SoundManager
ISoundManager <|-- SoundManager
@enduml
