@startuml
interface IResourceManager {
    ReadOnlyPath : string <<get>>
    ReadWritePath : string <<get>>
    ResourceMode : ResourceMode <<get>>
    CurrentVariant : string <<get>>
    PackageVersionListSerializer : PackageVersionListSerializer <<get>>
    UpdatableVersionListSerializer : UpdatableVersionListSerializer <<get>>
    ReadOnlyVersionListSerializer : ReadOnlyVersionListSerializer <<get>>
    ReadWriteVersionListSerializer : ReadWriteVersionListSerializer <<get>>
    ResourcePackVersionListSerializer : ResourcePackVersionListSerializer <<get>>
    ApplicableGameVersion : string <<get>>
    InternalResourceVersion : int <<get>>
    AssetCount : int <<get>>
    ResourceCount : int <<get>>
    ResourceGroupCount : int <<get>>
    UpdatePrefixUri : string <<get>> <<set>>
    GenerateReadWriteVersionListLength : int <<get>> <<set>>
    ApplyingResourcePackPath : string <<get>>
    ApplyWaitingCount : int <<get>>
    UpdateRetryCount : int <<get>> <<set>>
    UpdatingResourceGroup : IResourceGroup <<get>>
    UpdateWaitingCount : int <<get>>
    UpdateWaitingWhilePlayingCount : int <<get>>
    UpdateCandidateCount : int <<get>>
    LoadTotalAgentCount : int <<get>>
    LoadFreeAgentCount : int <<get>>
    LoadWorkingAgentCount : int <<get>>
    LoadWaitingTaskCount : int <<get>>
    AssetAutoReleaseInterval : float <<get>> <<set>>
    AssetCapacity : int <<get>> <<set>>
    AssetExpireTime : float <<get>> <<set>>
    AssetPriority : int <<get>> <<set>>
    ResourceAutoReleaseInterval : float <<get>> <<set>>
    ResourceCapacity : int <<get>> <<set>>
    ResourceExpireTime : float <<get>> <<set>>
    ResourcePriority : int <<get>> <<set>>
     <<event>> ResourceVerifyStart : EventHandler<ResourceVerifyStartEventArgs> 
     <<event>> ResourceVerifySuccess : EventHandler<ResourceVerifySuccessEventArgs> 
     <<event>> ResourceVerifyFailure : EventHandler<ResourceVerifyFailureEventArgs> 
     <<event>> ResourceApplyStart : EventHandler<ResourceApplyStartEventArgs> 
     <<event>> ResourceApplySuccess : EventHandler<ResourceApplySuccessEventArgs> 
     <<event>> ResourceApplyFailure : EventHandler<ResourceApplyFailureEventArgs> 
     <<event>> ResourceUpdateStart : EventHandler<ResourceUpdateStartEventArgs> 
     <<event>> ResourceUpdateChanged : EventHandler<ResourceUpdateChangedEventArgs> 
     <<event>> ResourceUpdateSuccess : EventHandler<ResourceUpdateSuccessEventArgs> 
     <<event>> ResourceUpdateFailure : EventHandler<ResourceUpdateFailureEventArgs> 
     <<event>> ResourceUpdateAllComplete : EventHandler<ResourceUpdateAllCompleteEventArgs> 
    SetReadOnlyPath(readOnlyPath:string) : void
    SetReadWritePath(readWritePath:string) : void
    SetResourceMode(resourceMode:ResourceMode) : void
    SetCurrentVariant(currentVariant:string) : void
    SetObjectPoolManager(objectPoolManager:IObjectPoolManager) : void
    SetFileSystemManager(fileSystemManager:IFileSystemManager) : void
    SetDownloadManager(downloadManager:IDownloadManager) : void
    SetDecryptResourceCallback(decryptResourceCallback:DecryptResourceCallback) : void
    SetResourceHelper(resourceHelper:IResourceHelper) : void
    AddLoadResourceAgentHelper(loadResourceAgentHelper:ILoadResourceAgentHelper) : void
    InitResources(initResourcesCompleteCallback:InitResourcesCompleteCallback) : void
    CheckVersionList(latestInternalResourceVersion:int) : CheckVersionListResult
    UpdateVersionList(versionListLength:int, versionListHashCode:int, versionListCompressedLength:int, versionListCompressedHashCode:int, updateVersionListCallbacks:UpdateVersionListCallbacks) : void
    VerifyResources(verifyResourceLengthPerFrame:int, verifyResourcesCompleteCallback:VerifyResourcesCompleteCallback) : void
    CheckResources(ignoreOtherVariant:bool, checkResourcesCompleteCallback:CheckResourcesCompleteCallback) : void
    ApplyResources(resourcePackPath:string, applyResourcesCompleteCallback:ApplyResourcesCompleteCallback) : void
    UpdateResources(updateResourcesCompleteCallback:UpdateResourcesCompleteCallback) : void
    UpdateResources(resourceGroupName:string, updateResourcesCompleteCallback:UpdateResourcesCompleteCallback) : void
    StopUpdateResources() : void
    VerifyResourcePack(resourcePackPath:string) : bool
    GetAllLoadAssetInfos() : TaskInfo[]
    GetAllLoadAssetInfos(results:List<TaskInfo>) : void
    HasAsset(assetName:string) : HasAssetResult
    LoadAsset(assetName:string, loadAssetCallbacks:LoadAssetCallbacks) : void
    LoadAsset(assetName:string, assetType:Type, loadAssetCallbacks:LoadAssetCallbacks) : void
    LoadAsset(assetName:string, priority:int, loadAssetCallbacks:LoadAssetCallbacks) : void
    LoadAsset(assetName:string, loadAssetCallbacks:LoadAssetCallbacks, userData:object) : void
    LoadAsset(assetName:string, assetType:Type, priority:int, loadAssetCallbacks:LoadAssetCallbacks) : void
    LoadAsset(assetName:string, assetType:Type, loadAssetCallbacks:LoadAssetCallbacks, userData:object) : void
    LoadAsset(assetName:string, priority:int, loadAssetCallbacks:LoadAssetCallbacks, userData:object) : void
    LoadAsset(assetName:string, assetType:Type, priority:int, loadAssetCallbacks:LoadAssetCallbacks, userData:object) : void
    UnloadAsset(asset:object) : void
    LoadScene(sceneAssetName:string, loadSceneCallbacks:LoadSceneCallbacks) : void
    LoadScene(sceneAssetName:string, priority:int, loadSceneCallbacks:LoadSceneCallbacks) : void
    LoadScene(sceneAssetName:string, loadSceneCallbacks:LoadSceneCallbacks, userData:object) : void
    LoadScene(sceneAssetName:string, priority:int, loadSceneCallbacks:LoadSceneCallbacks, userData:object) : void
    UnloadScene(sceneAssetName:string, unloadSceneCallbacks:UnloadSceneCallbacks) : void
    UnloadScene(sceneAssetName:string, unloadSceneCallbacks:UnloadSceneCallbacks, userData:object) : void
    GetBinaryPath(binaryAssetName:string) : string
    GetBinaryPath(binaryAssetName:string, storageInReadOnly:bool, storageInFileSystem:bool, relativePath:string, fileName:string) : bool
    GetBinaryLength(binaryAssetName:string) : int
    LoadBinary(binaryAssetName:string, loadBinaryCallbacks:LoadBinaryCallbacks) : void
    LoadBinary(binaryAssetName:string, loadBinaryCallbacks:LoadBinaryCallbacks, userData:object) : void
    LoadBinaryFromFileSystem(binaryAssetName:string) : byte[]
    LoadBinaryFromFileSystem(binaryAssetName:string, buffer:byte[]) : int
    LoadBinaryFromFileSystem(binaryAssetName:string, buffer:byte[], startIndex:int) : int
    LoadBinaryFromFileSystem(binaryAssetName:string, buffer:byte[], startIndex:int, length:int) : int
    LoadBinarySegmentFromFileSystem(binaryAssetName:string, length:int) : byte[]
    LoadBinarySegmentFromFileSystem(binaryAssetName:string, offset:int, length:int) : byte[]
    LoadBinarySegmentFromFileSystem(binaryAssetName:string, buffer:byte[]) : int
    LoadBinarySegmentFromFileSystem(binaryAssetName:string, buffer:byte[], length:int) : int
    LoadBinarySegmentFromFileSystem(binaryAssetName:string, buffer:byte[], startIndex:int, length:int) : int
    LoadBinarySegmentFromFileSystem(binaryAssetName:string, offset:int, buffer:byte[]) : int
    LoadBinarySegmentFromFileSystem(binaryAssetName:string, offset:int, buffer:byte[], length:int) : int
    LoadBinarySegmentFromFileSystem(binaryAssetName:string, offset:int, buffer:byte[], startIndex:int, length:int) : int
    HasResourceGroup(resourceGroupName:string) : bool
    GetResourceGroup() : IResourceGroup
    GetResourceGroup(resourceGroupName:string) : IResourceGroup
    GetAllResourceGroups() : IResourceGroup[]
    GetAllResourceGroups(results:List<IResourceGroup>) : void
    GetResourceGroupCollection(resourceGroupNames:string[]) : IResourceGroupCollection
    GetResourceGroupCollection(resourceGroupNames:List<string>) : IResourceGroupCollection
}
@enduml
