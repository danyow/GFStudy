@startuml
class DebuggerManager <<sealed>> <<partial>> {
}
class DebuggerWindowGroup <<sealed>> {
    - <<readonly>> m_DebuggerWindows : List<KeyValuePair<string, IDebuggerWindow>>
    - m_SelectedIndex : int
    - m_DebuggerWindowNames : string[]
    + DebuggerWindowGroup()
    + DebuggerWindowCount : int <<get>>
    + SelectedIndex : int <<get>> <<set>>
    + SelectedWindow : IDebuggerWindow <<get>>
    + Initialize(args:object[]) : void
    + Shutdown() : void
    + OnEnter() : void
    + OnLeave() : void
    + OnUpdate(elapseSeconds:float, realElapseSeconds:float) : void
    + OnDraw() : void
    - RefreshDebuggerWindowNames() : void
    + GetDebuggerWindowNames() : string[]
    + GetDebuggerWindow(path:string) : IDebuggerWindow
    + SelectDebuggerWindow(path:string) : bool
    + RegisterDebuggerWindow(path:string, debuggerWindow:IDebuggerWindow) : void
    + UnregisterDebuggerWindow(path:string) : bool
    - InternalGetDebuggerWindow(name:string) : IDebuggerWindow
    - InternalSelectDebuggerWindow(name:string) : bool
}
GameFrameworkModule <|-- DebuggerManager
IDebuggerManager <|-- DebuggerManager
DebuggerManager +-- DebuggerWindowGroup
IDebuggerWindowGroup <|-- DebuggerWindowGroup
@enduml
