@startuml
class FsmManager <<sealed>> {
    - <<readonly>> m_Fsms : Dictionary<TypeNamePair, FsmBase>
    - <<readonly>> m_TempFsms : List<FsmBase>
    + FsmManager()
    <<internal>> <<override>> Priority : int <<get>>
    + Count : int <<get>>
    <<internal>> <<override>> Update(elapseSeconds:float, realElapseSeconds:float) : void
    <<internal>> <<override>> Shutdown() : void
    + HasFsm() : bool
    + HasFsm(ownerType:Type) : bool
    + HasFsm(name:string) : bool
    + HasFsm(ownerType:Type, name:string) : bool
    + GetFsm() : IFsm<T>
    + GetFsm(ownerType:Type) : FsmBase
    + GetFsm(name:string) : IFsm<T>
    + GetFsm(ownerType:Type, name:string) : FsmBase
    + GetAllFsms() : FsmBase[]
    + GetAllFsms(results:List<FsmBase>) : void
    + CreateFsm(owner:T, states:FsmState<T>[]) : IFsm<T>
    + CreateFsm(name:string, owner:T, states:FsmState<T>[]) : IFsm<T>
    + CreateFsm(owner:T, states:List<FsmState<T>>) : IFsm<T>
    + CreateFsm(name:string, owner:T, states:List<FsmState<T>>) : IFsm<T>
    + DestroyFsm() : bool
    + DestroyFsm(ownerType:Type) : bool
    + DestroyFsm(name:string) : bool
    + DestroyFsm(ownerType:Type, name:string) : bool
    + DestroyFsm(fsm:IFsm<T>) : bool
    + DestroyFsm(fsm:FsmBase) : bool
    - InternalHasFsm(typeNamePair:TypeNamePair) : bool
    - InternalGetFsm(typeNamePair:TypeNamePair) : FsmBase
    - InternalDestroyFsm(typeNamePair:TypeNamePair) : bool
}
GameFrameworkModule <|-- FsmManager
IFsmManager <|-- FsmManager
@enduml
